# ======================================
# üìö IMPORTANDO BIBLIOTECAS NECESS√ÅRIAS
# ======================================

import pandas as pd                 # Para manipula√ß√£o de dados (DataFrame, leitura de CSV etc.)
import numpy as np                  # Para c√°lculos matem√°ticos (m√©dia, arrays, etc.)
import seaborn as sns               # Para gr√°ficos est√°ticos (histograma, gr√°fico de barras, etc.)
import matplotlib.pyplot as plt     # Para visualiza√ß√£o de gr√°ficos
import plotly.express as px         # Para gr√°ficos interativos (ex: scatter matrix)

# ======================================
# üìÇ CARREGANDO OS DADOS
# ======================================

# L√™ os dados de cr√©dito a partir de um arquivo CSV
base_credit = pd.read_csv(r'C:\Users\isacj\OneDrive\Documentos\machine learning\credit_data (1).csv')

# ======================================
# üìä AN√ÅLISE EXPLORAT√ìRIA DOS DADOS (EDA)
# ======================================

# OBS: Esta parte est√° comentada para evitar execu√ß√£o autom√°tica.
# Voc√™ pode descomentar para visualizar os dados com gr√°ficos.

'''
# Verificando a distribui√ß√£o dos valores da coluna 'default'
valores, contagens = np.unique(base_credit['default'], return_counts=True)
print("Valores √∫nicos na coluna 'default':", valores)
print("Contagem de cada valor:", contagens)

# Gr√°fico de barras da vari√°vel alvo (default)
sns.countplot(x=base_credit['default'])
plt.title("Distribui√ß√£o de inadimpl√™ncia (default)")
plt.xlabel("Default (0 = n√£o inadimplente, 1 = inadimplente)")
plt.ylabel("Contagem")
plt.show()

# Histogramas das vari√°veis num√©ricas
plt.hist(base_credit['age'], bins=20, edgecolor='black')
plt.title("Distribui√ß√£o de Idade")
plt.xlabel("Idade")
plt.ylabel("Frequ√™ncia")
plt.show()

plt.hist(base_credit['income'], bins=20, edgecolor='black')
plt.title("Distribui√ß√£o de Renda")
plt.xlabel("Renda")
plt.ylabel("Frequ√™ncia")
plt.show()

plt.hist(base_credit['loan'], bins=20, edgecolor='black')
plt.title("Distribui√ß√£o de Empr√©stimo")
plt.xlabel("Valor do Empr√©stimo")
plt.ylabel("Frequ√™ncia")
plt.show()

# Matriz de dispers√£o interativa entre vari√°veis
grafico = px.scatter_matrix(
    base_credit,
    dimensions=['age', 'income', 'loan'],
    color='default',
    title="Dispers√£o entre Idade, Renda e Empr√©stimo"
)
grafico.show()
'''

# ======================================
# üßπ TRATAMENTO DE DADOS INCONSISTENTES
# ======================================

# Verifica se existem idades negativas (o que n√£o faz sentido)
print("√çndices com idade negativa:")
print(base_credit.loc[base_credit['age'] < 0].index)

# Calcula a m√©dia das idades v√°lidas (idade > 0)
media_idade_valida = base_credit['age'][base_credit['age'] > 0].mean()
print(f"M√©dia das idades v√°lidas: {media_idade_valida:.2f} anos")

# Substitui as idades negativas pela m√©dia calculada
base_credit.loc[base_credit['age'] < 0, 'age'] = media_idade_valida

# ======================================
# üß© TRATAMENTO DE VALORES FALTANTES (NaN)
# ======================================

# Verifica quantos valores ausentes existem em cada coluna
print("\nValores ausentes por coluna:")
print(base_credit.isnull().sum())

# Mostra os registros com idade ausente
print("\nRegistros com idade ausente:")
print(base_credit.loc[pd.isnull(base_credit['age'])])

# Substitui os valores ausentes na idade pela m√©dia v√°lida
base_credit['age'].fillna(media_idade_valida, inplace=True)

# Verifica novamente se ainda existem valores ausentes
print("\nValores ausentes ap√≥s o preenchimento:")
print(base_credit.isnull().sum())

# Mostra registros corrigidos
print(base_credit.loc[base_credit['clientid'].isin([29, 31, 32])])

# ======================================
# ü§ñ DIVIS√ÉO DOS DADOS: ENTRADAS (X) E SA√çDAS (y)
# ======================================

# Entradas (features): idade, renda e valor do empr√©stimo
X_credit = base_credit.iloc[:, 1:4].values
print("\nEntradas (X):")
print(X_credit)

# Sa√≠da (target): inadimplente ou n√£o (0 ou 1)
y_credit = base_credit.iloc[:, 4].values
print("\nSa√≠das (y):")
print(y_credit)

# ======================================
# ‚öñÔ∏è ESCALONAMENTO (PADRONIZA√á√ÉO) DOS DADOS
# ======================================

# Verificando valores m√≠nimo e m√°ximo da vari√°vel "income" antes da padroniza√ß√£o
print("\nExemplo antes da padroniza√ß√£o (coluna 'income'):")
print("M√≠nimo:", X_credit[:, 1].min())
print("M√°ximo:", X_credit[:, 1].max())

# Importa o escalonador padr√£o (z-score): (x - m√©dia) / desvio padr√£o
from sklearn.preprocessing import StandardScaler
scaler_credit = StandardScaler()

# Aplica o escalonamento nas entradas
X_credit = scaler_credit.fit_transform(X_credit)

print("\nEntradas ap√≥s padroniza√ß√£o:")
print(X_credit)


from sklearn.model_selection import train_test_split

# Divis√£o dos dados em treino e teste (75% treino, 25% teste)
X_credit_treinamento, X_credit_teste, y_credit_treinamento, y_credit_teste = train_test_split(
    X_credit, y_credit, test_size=0.25, random_state=0
)

# Impress√£o das dimens√µes dos conjuntos
print("üìê Formato dos conjuntos de dados:")
print("X_credit_treinamento:", X_credit_treinamento.shape)
print("y_credit_treinamento:", y_credit_treinamento.shape)
print("X_credit_teste:", X_credit_teste.shape)
print("y_credit_teste:", y_credit_teste.shape)

import pickle

with open('credit.pkl', mode = 'wb') as f:
  pickle.dump([X_credit_treinamento, y_credit_treinamento, X_credit_teste, y_credit_teste], f)